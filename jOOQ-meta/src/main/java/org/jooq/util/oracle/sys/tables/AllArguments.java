/**
 * This class is generated by jOOQ
 */
package org.jooq.util.oracle.sys.tables;

/**
 * This class is generated by jOOQ.
 *
 * Arguments in object accessible to the user
 */
@javax.annotation.Generated(value    = "http://jooq.sourceforge.net",
                            comments = "This class is generated by jOOQ")
public class AllArguments extends org.jooq.impl.TableImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord> {

	private static final long serialVersionUID = -691344093;

	/**
	 * The singleton instance of ALL_ARGUMENTS
	 */
	public static final org.jooq.util.oracle.sys.tables.AllArguments ALL_ARGUMENTS = new org.jooq.util.oracle.sys.tables.AllArguments();

	/**
	 * The class holding records for this type
	 */
	private static final java.lang.Class<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord> __RECORD_TYPE = org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord.class;

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord> getRecordType() {
		return __RECORD_TYPE;
	}

	/**
	 * Username of the owner of the object
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String> OWNER = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String>("OWNER", org.jooq.impl.SQLDataType.VARCHAR, ALL_ARGUMENTS);

	/**
	 * Procedure or function name
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String> OBJECT_NAME = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String>("OBJECT_NAME", org.jooq.impl.SQLDataType.VARCHAR, ALL_ARGUMENTS);

	/**
	 * Package name
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String> PACKAGE_NAME = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String>("PACKAGE_NAME", org.jooq.impl.SQLDataType.VARCHAR, ALL_ARGUMENTS);

	/**
	 * Object number of the object
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.math.BigDecimal> OBJECT_ID = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.math.BigDecimal>("OBJECT_ID", org.jooq.impl.SQLDataType.NUMERIC, ALL_ARGUMENTS);

	/**
	 * Overload unique identifier
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String> OVERLOAD = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String>("OVERLOAD", org.jooq.impl.SQLDataType.VARCHAR, ALL_ARGUMENTS);

	/**
	 * Argument name
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String> ARGUMENT_NAME = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String>("ARGUMENT_NAME", org.jooq.impl.SQLDataType.VARCHAR, ALL_ARGUMENTS);

	/**
	 * Position in argument list, or null for function return value
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.math.BigDecimal> POSITION = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.math.BigDecimal>("POSITION", org.jooq.impl.SQLDataType.NUMERIC, ALL_ARGUMENTS);

	/**
	 * Argument sequence, including all nesting levels
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.math.BigDecimal> SEQUENCE = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.math.BigDecimal>("SEQUENCE", org.jooq.impl.SQLDataType.NUMERIC, ALL_ARGUMENTS);

	/**
	 * Nesting depth of argument for composite types
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.math.BigDecimal> DATA_LEVEL = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.math.BigDecimal>("DATA_LEVEL", org.jooq.impl.SQLDataType.NUMERIC, ALL_ARGUMENTS);

	/**
	 * Datatype of the argument
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String> DATA_TYPE = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String>("DATA_TYPE", org.jooq.impl.SQLDataType.VARCHAR, ALL_ARGUMENTS);

	/**
	 * Default value for the argument
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String> DEFAULT_VALUE = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String>("DEFAULT_VALUE", org.jooq.impl.SQLDataType.CLOB, ALL_ARGUMENTS);

	/**
	 * Length of default value for the argument
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.math.BigDecimal> DEFAULT_LENGTH = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.math.BigDecimal>("DEFAULT_LENGTH", org.jooq.impl.SQLDataType.NUMERIC, ALL_ARGUMENTS);

	/**
	 * Argument direction (IN, OUT, or IN/OUT)
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String> IN_OUT = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String>("IN_OUT", org.jooq.impl.SQLDataType.VARCHAR, ALL_ARGUMENTS);

	/**
	 * Length of the column in bytes
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.math.BigDecimal> DATA_LENGTH = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.math.BigDecimal>("DATA_LENGTH", org.jooq.impl.SQLDataType.NUMERIC, ALL_ARGUMENTS);

	/**
	 * Length: decimal digits (NUMBER) or binary digits (FLOAT)
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.math.BigDecimal> DATA_PRECISION = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.math.BigDecimal>("DATA_PRECISION", org.jooq.impl.SQLDataType.NUMERIC, ALL_ARGUMENTS);

	/**
	 * Digits to right of decimal point in a number
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.math.BigDecimal> DATA_SCALE = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.math.BigDecimal>("DATA_SCALE", org.jooq.impl.SQLDataType.NUMERIC, ALL_ARGUMENTS);

	/**
	 * Argument radix for a number
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.math.BigDecimal> RADIX = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.math.BigDecimal>("RADIX", org.jooq.impl.SQLDataType.NUMERIC, ALL_ARGUMENTS);

	/**
	 * Character set name for the argument
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String> CHARACTER_SET_NAME = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String>("CHARACTER_SET_NAME", org.jooq.impl.SQLDataType.VARCHAR, ALL_ARGUMENTS);

	/**
	 * Owner name for the argument type in case of object types
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String> TYPE_OWNER = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String>("TYPE_OWNER", org.jooq.impl.SQLDataType.VARCHAR, ALL_ARGUMENTS);

	/**
	 * Object name for the argument type in case of object types
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String> TYPE_NAME = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String>("TYPE_NAME", org.jooq.impl.SQLDataType.VARCHAR, ALL_ARGUMENTS);

	/**
	 * Subordinate object name for the argument type in case of object types
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String> TYPE_SUBNAME = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String>("TYPE_SUBNAME", org.jooq.impl.SQLDataType.VARCHAR, ALL_ARGUMENTS);

	/**
	 * Database link name for the argument type in case of object types
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String> TYPE_LINK = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String>("TYPE_LINK", org.jooq.impl.SQLDataType.VARCHAR, ALL_ARGUMENTS);

	/**
	 * PL/SQL type name for numeric arguments
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String> PLS_TYPE = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String>("PLS_TYPE", org.jooq.impl.SQLDataType.VARCHAR, ALL_ARGUMENTS);

	/**
	 * Character limit for string datatypes
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.math.BigDecimal> CHAR_LENGTH = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.math.BigDecimal>("CHAR_LENGTH", org.jooq.impl.SQLDataType.NUMERIC, ALL_ARGUMENTS);

	/**
	 * Is the byte limit (B) or char limit (C) official for this string?
	 */
	public static final org.jooq.TableField<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String> CHAR_USED = new org.jooq.impl.TableFieldImpl<org.jooq.util.oracle.sys.tables.records.AllArgumentsRecord, java.lang.String>("CHAR_USED", org.jooq.impl.SQLDataType.VARCHAR, ALL_ARGUMENTS);

	/**
	 * No further instances allowed
	 */
	private AllArguments() {
		super("ALL_ARGUMENTS", org.jooq.util.oracle.sys.Sys.SYS);
	}
}
