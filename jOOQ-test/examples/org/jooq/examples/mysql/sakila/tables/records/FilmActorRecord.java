/**
 * This class is generated by jOOQ
 */
package org.jooq.examples.mysql.sakila.tables.records;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = {"http://www.jooq.org", "1.6.8"},
                            comments = "This class is generated by jOOQ")
public class FilmActorRecord extends org.jooq.impl.UpdatableRecordImpl<org.jooq.examples.mysql.sakila.tables.records.FilmActorRecord> {

	private static final long serialVersionUID = 984586099;

	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [sakila.film_actor.actor_id]
	 * REFERENCES actor [sakila.actor.actor_id]
	 * </pre></code>
	 */
	public void setActorId(java.lang.Short value) {
		setValue(org.jooq.examples.mysql.sakila.tables.FilmActor.ACTOR_ID, value);
	}

	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [sakila.film_actor.actor_id]
	 * REFERENCES actor [sakila.actor.actor_id]
	 * </pre></code>
	 */
	public java.lang.Short getActorId() {
		return getValue(org.jooq.examples.mysql.sakila.tables.FilmActor.ACTOR_ID);
	}

	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [sakila.film_actor.actor_id]
	 * REFERENCES actor [sakila.actor.actor_id]
	 * </pre></code>
	 */
	public org.jooq.examples.mysql.sakila.tables.records.ActorRecord fetchActor() throws java.sql.SQLException {
		return create()
			.selectFrom(org.jooq.examples.mysql.sakila.tables.Actor.ACTOR)
			.where(org.jooq.examples.mysql.sakila.tables.Actor.ACTOR_ID.equal(getValue(org.jooq.examples.mysql.sakila.tables.FilmActor.ACTOR_ID)))
			.fetchOne();
	}

	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [sakila.film_actor.film_id]
	 * REFERENCES film [sakila.film.film_id]
	 * </pre></code>
	 */
	public void setFilmId(java.lang.Short value) {
		setValue(org.jooq.examples.mysql.sakila.tables.FilmActor.FILM_ID, value);
	}

	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [sakila.film_actor.film_id]
	 * REFERENCES film [sakila.film.film_id]
	 * </pre></code>
	 */
	public java.lang.Short getFilmId() {
		return getValue(org.jooq.examples.mysql.sakila.tables.FilmActor.FILM_ID);
	}

	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [sakila.film_actor.film_id]
	 * REFERENCES film [sakila.film.film_id]
	 * </pre></code>
	 */
	public org.jooq.examples.mysql.sakila.tables.records.FilmRecord fetchFilm() throws java.sql.SQLException {
		return create()
			.selectFrom(org.jooq.examples.mysql.sakila.tables.Film.FILM)
			.where(org.jooq.examples.mysql.sakila.tables.Film.FILM_ID.equal(getValue(org.jooq.examples.mysql.sakila.tables.FilmActor.FILM_ID)))
			.fetchOne();
	}

	/**
	 * An uncommented item
	 */
	public void setLastUpdate(java.sql.Timestamp value) {
		setValue(org.jooq.examples.mysql.sakila.tables.FilmActor.LAST_UPDATE, value);
	}

	/**
	 * An uncommented item
	 */
	public java.sql.Timestamp getLastUpdate() {
		return getValue(org.jooq.examples.mysql.sakila.tables.FilmActor.LAST_UPDATE);
	}

	/**
	 * Create a detached FilmActorRecord
	 */
	public FilmActorRecord() {
		super(org.jooq.examples.mysql.sakila.tables.FilmActor.FILM_ACTOR);
	}

	/**
	 * Create an attached FilmActorRecord
	 * @deprecated - 1.6.4 [#363, #789] - use the other constructor instead for unattached
	 * records, or {@link org.jooq.impl.Factory#newRecord(org.jooq.Table)} for attached ones
	 */
	@Deprecated
	public FilmActorRecord(org.jooq.Configuration configuration) {
		super(org.jooq.examples.mysql.sakila.tables.FilmActor.FILM_ACTOR, configuration);
	}
}
