/**
 * This class is generated by jOOQ
 */
package org.jooq.examples.mysql.sakila.tables.records;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = "http://jooq.sourceforge.net",
                            comments = "This class is generated by jOOQ")
public class StaffRecord extends org.jooq.impl.UpdatableRecordImpl<org.jooq.examples.mysql.sakila.tables.records.StaffRecord> {

	private static final long serialVersionUID = -1253703288;

	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 */
	public void setStaffId(java.lang.Byte value) {
		setValue(org.jooq.examples.mysql.sakila.tables.Staff.STAFF_ID, value);
	}

	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 */
	public java.lang.Byte getStaffId() {
		return getValue(org.jooq.examples.mysql.sakila.tables.Staff.STAFF_ID);
	}

	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 */
	public java.util.List<org.jooq.examples.mysql.sakila.tables.records.PaymentRecord> fetchPaymentList() throws java.sql.SQLException {
		return create()
			.selectFrom(org.jooq.examples.mysql.sakila.tables.Payment.PAYMENT)
			.where(org.jooq.examples.mysql.sakila.tables.Payment.STAFF_ID.equal(getValue(org.jooq.examples.mysql.sakila.tables.Staff.STAFF_ID)))
			.fetch();
	}

	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 *
	 * @deprecated Because of risk of ambiguity (#187), code generation for this<br/>
	 *             method will not be supported anymore, soon.<br/><br/>
	 *             If you wish to remove this method, adapt your configuration:<br/>
	 *             <code>generator.generate.deprecated=false</code>
	 */
	@Deprecated
	public java.util.List<org.jooq.examples.mysql.sakila.tables.records.PaymentRecord> getPaymentList() throws java.sql.SQLException {
		return create()
			.selectFrom(org.jooq.examples.mysql.sakila.tables.Payment.PAYMENT)
			.where(org.jooq.examples.mysql.sakila.tables.Payment.STAFF_ID.equal(getValue(org.jooq.examples.mysql.sakila.tables.Staff.STAFF_ID)))
			.fetch();
	}

	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 */
	public java.util.List<org.jooq.examples.mysql.sakila.tables.records.RentalRecord> fetchRentalList() throws java.sql.SQLException {
		return create()
			.selectFrom(org.jooq.examples.mysql.sakila.tables.Rental.RENTAL)
			.where(org.jooq.examples.mysql.sakila.tables.Rental.STAFF_ID.equal(getValue(org.jooq.examples.mysql.sakila.tables.Staff.STAFF_ID)))
			.fetch();
	}

	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 *
	 * @deprecated Because of risk of ambiguity (#187), code generation for this<br/>
	 *             method will not be supported anymore, soon.<br/><br/>
	 *             If you wish to remove this method, adapt your configuration:<br/>
	 *             <code>generator.generate.deprecated=false</code>
	 */
	@Deprecated
	public java.util.List<org.jooq.examples.mysql.sakila.tables.records.RentalRecord> getRentalList() throws java.sql.SQLException {
		return create()
			.selectFrom(org.jooq.examples.mysql.sakila.tables.Rental.RENTAL)
			.where(org.jooq.examples.mysql.sakila.tables.Rental.STAFF_ID.equal(getValue(org.jooq.examples.mysql.sakila.tables.Staff.STAFF_ID)))
			.fetch();
	}

	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 */
	public java.util.List<org.jooq.examples.mysql.sakila.tables.records.StoreRecord> fetchStoreList() throws java.sql.SQLException {
		return create()
			.selectFrom(org.jooq.examples.mysql.sakila.tables.Store.STORE)
			.where(org.jooq.examples.mysql.sakila.tables.Store.MANAGER_STAFF_ID.equal(getValue(org.jooq.examples.mysql.sakila.tables.Staff.STAFF_ID)))
			.fetch();
	}

	/**
	 * An uncommented item
	 * 
	 * PRIMARY KEY
	 *
	 * @deprecated Because of risk of ambiguity (#187), code generation for this<br/>
	 *             method will not be supported anymore, soon.<br/><br/>
	 *             If you wish to remove this method, adapt your configuration:<br/>
	 *             <code>generator.generate.deprecated=false</code>
	 */
	@Deprecated
	public java.util.List<org.jooq.examples.mysql.sakila.tables.records.StoreRecord> getStoreList() throws java.sql.SQLException {
		return create()
			.selectFrom(org.jooq.examples.mysql.sakila.tables.Store.STORE)
			.where(org.jooq.examples.mysql.sakila.tables.Store.MANAGER_STAFF_ID.equal(getValue(org.jooq.examples.mysql.sakila.tables.Staff.STAFF_ID)))
			.fetch();
	}

	/**
	 * An uncommented item
	 */
	public void setFirstName(java.lang.String value) {
		setValue(org.jooq.examples.mysql.sakila.tables.Staff.FIRST_NAME, value);
	}

	/**
	 * An uncommented item
	 */
	public java.lang.String getFirstName() {
		return getValue(org.jooq.examples.mysql.sakila.tables.Staff.FIRST_NAME);
	}

	/**
	 * An uncommented item
	 */
	public void setLastName(java.lang.String value) {
		setValue(org.jooq.examples.mysql.sakila.tables.Staff.LAST_NAME, value);
	}

	/**
	 * An uncommented item
	 */
	public java.lang.String getLastName() {
		return getValue(org.jooq.examples.mysql.sakila.tables.Staff.LAST_NAME);
	}

	/**
	 * An uncommented item
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [sakila.staff.address_id]
	 * REFERENCES address [sakila.address.address_id]
	 * </pre></code>
	 */
	public void setAddressId(java.lang.Short value) {
		setValue(org.jooq.examples.mysql.sakila.tables.Staff.ADDRESS_ID, value);
	}

	/**
	 * An uncommented item
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [sakila.staff.address_id]
	 * REFERENCES address [sakila.address.address_id]
	 * </pre></code>
	 */
	public java.lang.Short getAddressId() {
		return getValue(org.jooq.examples.mysql.sakila.tables.Staff.ADDRESS_ID);
	}

	/**
	 * An uncommented item
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [sakila.staff.address_id]
	 * REFERENCES address [sakila.address.address_id]
	 * </pre></code>
	 */
	public org.jooq.examples.mysql.sakila.tables.records.AddressRecord fetchAddress() throws java.sql.SQLException {
		return create()
			.selectFrom(org.jooq.examples.mysql.sakila.tables.Address.ADDRESS)
			.where(org.jooq.examples.mysql.sakila.tables.Address.ADDRESS_ID.equal(getValue(org.jooq.examples.mysql.sakila.tables.Staff.ADDRESS_ID)))
			.fetchOne();
	}

	/**
	 * An uncommented item
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [sakila.staff.address_id]
	 * REFERENCES address [sakila.address.address_id]
	 * </pre></code>
	 *
	 * @deprecated Because of risk of ambiguity (#187), code generation for this<br/>
	 *             method will not be supported anymore, soon.<br/><br/>
	 *             If you wish to remove this method, adapt your configuration:<br/>
	 *             <code>generator.generate.deprecated=false</code>
	 */
	@Deprecated
	public org.jooq.examples.mysql.sakila.tables.records.AddressRecord getAddress() throws java.sql.SQLException {
		return create()
			.selectFrom(org.jooq.examples.mysql.sakila.tables.Address.ADDRESS)
			.where(org.jooq.examples.mysql.sakila.tables.Address.ADDRESS_ID.equal(getValue(org.jooq.examples.mysql.sakila.tables.Staff.ADDRESS_ID)))
			.fetchOne();
	}

	/**
	 * An uncommented item
	 */
	public void setPicture(byte[] value) {
		setValue(org.jooq.examples.mysql.sakila.tables.Staff.PICTURE, value);
	}

	/**
	 * An uncommented item
	 */
	public byte[] getPicture() {
		return getValue(org.jooq.examples.mysql.sakila.tables.Staff.PICTURE);
	}

	/**
	 * An uncommented item
	 */
	public void setEmail(java.lang.String value) {
		setValue(org.jooq.examples.mysql.sakila.tables.Staff.EMAIL, value);
	}

	/**
	 * An uncommented item
	 */
	public java.lang.String getEmail() {
		return getValue(org.jooq.examples.mysql.sakila.tables.Staff.EMAIL);
	}

	/**
	 * An uncommented item
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [sakila.staff.store_id]
	 * REFERENCES store [sakila.store.store_id]
	 * </pre></code>
	 */
	public void setStoreId(java.lang.Byte value) {
		setValue(org.jooq.examples.mysql.sakila.tables.Staff.STORE_ID, value);
	}

	/**
	 * An uncommented item
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [sakila.staff.store_id]
	 * REFERENCES store [sakila.store.store_id]
	 * </pre></code>
	 */
	public java.lang.Byte getStoreId() {
		return getValue(org.jooq.examples.mysql.sakila.tables.Staff.STORE_ID);
	}

	/**
	 * An uncommented item
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [sakila.staff.store_id]
	 * REFERENCES store [sakila.store.store_id]
	 * </pre></code>
	 */
	public org.jooq.examples.mysql.sakila.tables.records.StoreRecord fetchStore() throws java.sql.SQLException {
		return create()
			.selectFrom(org.jooq.examples.mysql.sakila.tables.Store.STORE)
			.where(org.jooq.examples.mysql.sakila.tables.Store.STORE_ID.equal(getValue(org.jooq.examples.mysql.sakila.tables.Staff.STORE_ID)))
			.fetchOne();
	}

	/**
	 * An uncommented item
	 * <p>
	 * <code><pre>
	 * FOREIGN KEY [sakila.staff.store_id]
	 * REFERENCES store [sakila.store.store_id]
	 * </pre></code>
	 *
	 * @deprecated Because of risk of ambiguity (#187), code generation for this<br/>
	 *             method will not be supported anymore, soon.<br/><br/>
	 *             If you wish to remove this method, adapt your configuration:<br/>
	 *             <code>generator.generate.deprecated=false</code>
	 */
	@Deprecated
	public org.jooq.examples.mysql.sakila.tables.records.StoreRecord getStore() throws java.sql.SQLException {
		return create()
			.selectFrom(org.jooq.examples.mysql.sakila.tables.Store.STORE)
			.where(org.jooq.examples.mysql.sakila.tables.Store.STORE_ID.equal(getValue(org.jooq.examples.mysql.sakila.tables.Staff.STORE_ID)))
			.fetchOne();
	}

	/**
	 * An uncommented item
	 */
	public void setActive(java.lang.Byte value) {
		setValue(org.jooq.examples.mysql.sakila.tables.Staff.ACTIVE, value);
	}

	/**
	 * An uncommented item
	 */
	public java.lang.Byte getActive() {
		return getValue(org.jooq.examples.mysql.sakila.tables.Staff.ACTIVE);
	}

	/**
	 * An uncommented item
	 */
	public void setUsername(java.lang.String value) {
		setValue(org.jooq.examples.mysql.sakila.tables.Staff.USERNAME, value);
	}

	/**
	 * An uncommented item
	 */
	public java.lang.String getUsername() {
		return getValue(org.jooq.examples.mysql.sakila.tables.Staff.USERNAME);
	}

	/**
	 * An uncommented item
	 */
	public void setPassword(java.lang.String value) {
		setValue(org.jooq.examples.mysql.sakila.tables.Staff.PASSWORD, value);
	}

	/**
	 * An uncommented item
	 */
	public java.lang.String getPassword() {
		return getValue(org.jooq.examples.mysql.sakila.tables.Staff.PASSWORD);
	}

	/**
	 * An uncommented item
	 */
	public void setLastUpdate(java.sql.Timestamp value) {
		setValue(org.jooq.examples.mysql.sakila.tables.Staff.LAST_UPDATE, value);
	}

	/**
	 * An uncommented item
	 */
	public java.sql.Timestamp getLastUpdate() {
		return getValue(org.jooq.examples.mysql.sakila.tables.Staff.LAST_UPDATE);
	}

	/**
	 * Create a detached StaffRecord
	 */
	public StaffRecord() {
		super(org.jooq.examples.mysql.sakila.tables.Staff.STAFF);
	}

	/**
	 * Create an attached StaffRecord
	 * @deprecated - 1.6.4 [#363, #789] - use the other constructor instead for unattached
	 * records, or {@link org.jooq.impl.Factory#newRecord(org.jooq.Table)} for attached ones
	 */
	@Deprecated
	public StaffRecord(org.jooq.Configuration configuration) {
		super(org.jooq.examples.mysql.sakila.tables.Staff.STAFF, configuration);
	}
}
