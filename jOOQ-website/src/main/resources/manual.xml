<?xml version="1.0" encoding="UTF-8"?>
<manual>
	<section id="manual">
		<title>The jOOQ User Manual</title>
		<content>
			<p>
				The manual is divided in these sections
				<ul>
					<li>
						<reference id="JOOQ"/>
						<p>
							See these chapters for an overview of the jOOQ internal architecture
							and all types that are involved with jOOQ's query creation and
							execution. This is the important part for you, also, if you wish to
							extend jOOQ
						</p>
					</li>
					<li>
						<reference id="META"/>
						<p>
							See these chapters to understand how you can use jOOQ as a source code
							generator, and what type of artefacts are generated by jOOQ
						</p>
					</li>
					<li>
						<reference id="DSL"/>
						<p>
							See these chapters to learn about how to use jOOQ in every day's work. The
							jOOQ DSL is the main way to create and execute jOOQ queries almost as
							if SQL was embedded in Java directly
						</p>
					</li>
					<li>
						<reference id="Advanced"/>
						<p>
							Some advanced topics including not-everyday functionality
						</p>
					</li>
				</ul>
			</p>
		</content>
		<sections>
			<section id="JOOQ">
				<title>jOOQ classes and their usage</title>
				<content>
					<p>
						In this section, you will learn about how to use jOOQ object
						factories and the jOOQ object oriented query model, to express
						your
						SQL in jOOQ
					</p>
					<h2>Overview</h2>
					<p>jOOQ essentially has two packages:</p>
					<ul>
						<li>org.jooq: the jOOQ API. Here you will find interfaces for all
							SQL concepts
						</li>
						<li>org.jooq.impl: the jOOQ implementation and factories. Most
							implementation classes are package private, you can only access
							them using the org.jooq.impl.Factory
						</li>
					</ul>
					<p>
						This section is about the main jOOQ classes and the global
						architecture. Most of the time, however, you will be using the DSL
						API (DSL for Domain Specific Language) in order to create queries
						the way you're used to in SQL
					</p>
				</content>
				<sections>
					<section id="ExampleDatabase">
						<title>The example database</title>
						<content>
							<p>
								For the examples in this manual, the same database will always be
								referred to. It essentially contains of these entities (for
								example in the Oracle dialect):
							</p>
							<pre class="prettyprint lang-sql">
CREATE TABLE t_language (
  id NUMBER(7) NOT NULL PRIMARY KEY,
  cd CHAR(2) NOT NULL,
  description VARCHAR2(50)
)

CREATE TABLE t_author (
  id NUMBER(7) NOT NULL PRIMARY KEY,
  first_name VARCHAR2(50),
  last_name VARCHAR2(50) NOT NULL,
  date_of_birth DATE,
  year_of_birth NUMBER(7)
)

CREATE TABLE t_book (
  id NUMBER(7) NOT NULL PRIMARY KEY,
  author_id NUMBER(7) NOT NULL,
  title VARCHAR2(400) NOT NULL,
  published_in NUMBER(7) NOT NULL,
  language_id NUMBER(7) NOT NULL,
  FOREIGN KEY (AUTHOR_ID) REFERENCES T_AUTHOR(ID),
  FOREIGN KEY (LANGUAGE_ID) REFERENCES T_LANGUAGE(ID)
)

CREATE TABLE t_book_store (
  name VARCHAR2(400) NOT NULL UNIQUE
)

CREATE TABLE t_book_to_book_store (
  book_store_name VARCHAR2(400) NOT NULL,
  book_id INTEGER NOT NULL,
  stock INTEGER,
  PRIMARY KEY(book_store_name, book_id),
  CONSTRAINT b2bs_book_store_id
    FOREIGN KEY (book_store_name)
    REFERENCES t_book_store (name)
    ON DELETE CASCADE,
  CONSTRAINT b2bs_book_id
    FOREIGN KEY (book_id)
    REFERENCES t_book (id)
    ON DELETE CASCADE
)							
							</pre>
							<p>More entities, types (e.g. UDT's, ARRAY types, ENUM types, etc),
								stored procedures and packages are introduced for specific examples
							</p>
						</content>
					</section>
					<section id="Factory">
						<title>The factory class</title>
					</section>
					<section id="Table">
						<title>Tables and Fields</title>
					</section>
					<section id="Result">
						<title>Results and Records</title>
					</section>
					<section id="UpdatableRecord">
						<title>Updatable Records</title>
					</section>
					<section id="Query">
						<title>Query and its subtypes</title>
					</section>
					<section id="ResultQuery">
						<title>ResultQuery and various ways of fetching data</title>
					</section>
					<section id="QueryPart">
						<title>QueryParts and the global architecture</title>
					</section>
					<section id="Serializability">
						<title>Serializability of QueryParts and Results</title>
					</section>
					<section id="Extend">
						<title>Extend jOOQ types with custom implementations</title>
					</section>
				</sections>
			</section>
			<section id="META">
				<title>Meta model source code generation</title>
				<sections>
					<section id="Configuration">
						<title>Configuration and setup</title>
					</section>
					<section id="SCHEMA">
						<title>Schemata</title>
					</section>
					<section id="TABLE">
						<title>Tables and views and their corresponding records</title>
					</section>
					<section id="PROCEDURE">
						<title>Procedures and packages</title>
					</section>
					<section id="UDT">
						<title>UDT's including ARRAY and ENUM types</title>
					</section>
					<section id="SEQUENCE">
						<title>Sequences</title>
					</section>
				</sections>
			</section>
			<section id="DSL">
				<title>DSL support</title>
				<sections>
					<section id="SELECT">
						<title>Complete SELECT syntax</title>
					</section>
					<section id="CONDITION">
						<title>Conditions</title>
					</section>
					<section id="ALIAS">
						<title>Aliased tables and fields</title>
					</section>
					<section id="IN">
						<title>Nested select statements using the IN operator</title>
					</section>
					<section id="EXISTS">
						<title>Nested select statements using the EXISTS operator</title>
					</section>
					<section id="NESTED">
						<title>Other types of nested selects</title>
					</section>
					<section id="UNION">
						<title>UNION and other set operations</title>
					</section>
					<section id="FUNCTIONS">
						<title>Functions, aggregate operators, and window functions</title>
					</section>
					<section id="PROCEDURES">
						<title>Stored procedures and functions</title>
					</section>
					<section id="ARITHMETIC">
						<title>Arithmetic operations</title>
					</section>
					<section id="CASE">
						<title>The CASE clause</title>
					</section>
					<section id="CAST">
						<title>Type casting</title>
					</section>
					<section id="SQL">
						<title>When it's just much easier: Plain SQL</title>
					</section>
				</sections>
			</section>
			<section id="ADVANCED">
				<title>Advanced topics</title>
				<sections>
					<section id="MasterData">
						<title>Master data generation</title>
					</section>
					<section id="SchemaMapping">
						<title>Mapping generated schemata and tables to productive environments</title>
					</section>
					<section id="OracleHints">
						<title>Adding Oracle hints to queries</title>
					</section>
					<section id="CONNECTBY">
						<title>The Oracle CONNECT BY clause for hierarchical queries</title>
					</section>
					<section id="Export">
						<title>Exporting data to XML, CSV, JSON, HTML, Text</title>
					</section>
					<section id="Import">
						<title>Importing data from XML, CSV</title>
					</section>
				</sections>
			</section>
		</sections>
	</section>
</manual>